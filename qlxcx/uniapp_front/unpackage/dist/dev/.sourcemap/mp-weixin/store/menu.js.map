{"version":3,"file":"menu.js","sources":["store/menu.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport { mockMenuData } from '@/mock/menu';\r\nimport * as menuApi from '@/api/menu';\r\n\r\nexport const useMenuStore = defineStore('menu', {\r\n    state: () => ({\r\n        categories: [],\r\n        products: {}, // 以 categoryId 为 key 存储商品列表\r\n        allProducts: [], // 所有商品的平铺列表\r\n        currentCategoryId: null,\r\n        status: 'idle', // 'idle' | 'loading' | 'success' | 'error'\r\n        error: null,\r\n        useRealApi: false // 是否使用真实API，可以在设置中切换\r\n    }),\r\n\r\n    getters: {\r\n        currentProducts: (state) => {\r\n            if (!state.currentCategoryId || !state.products[state.currentCategoryId]) {\r\n                return [];\r\n            }\r\n            return state.products[state.currentCategoryId];\r\n        }\r\n    },\r\n\r\n    actions: {\r\n        setCurrentCategory(categoryId) {\r\n            this.currentCategoryId = categoryId;\r\n            // 因为现在是本地数据，不再需要按需加载，数据是全的\r\n        },\r\n\r\n        async fetchMenuData() {\r\n            this.status = 'loading';\r\n            this.error = null;\r\n\r\n            try {\r\n                if (this.useRealApi) {\r\n                    // 使用真实API\r\n                    await this.fetchRealMenuData();\r\n                } else {\r\n                    // 使用模拟数据\r\n                    await this.fetchMockMenuData();\r\n                }\r\n                this.status = 'success';\r\n            } catch (err) {\r\n                this.status = 'error';\r\n                this.error = err.message || '加载菜单数据失败';\r\n                console.error('获取菜单数据失败:', err);\r\n            }\r\n        },\r\n\r\n        async fetchRealMenuData() {\r\n            // 获取分类\r\n            const categories = await menuApi.getCategories();\r\n            this.categories = categories.map(cat => ({\r\n                id: cat.id,\r\n                name: cat.name,\r\n                description: cat.description\r\n            }));\r\n\r\n            // 获取所有商品\r\n            const products = await menuApi.getProducts();\r\n            this.allProducts = products;\r\n\r\n            // 按分类组织商品\r\n            this.products = {};\r\n            this.categories.forEach(category => {\r\n                this.products[category.id] = products.filter(product => product.category === category.id);\r\n            });\r\n\r\n            // 设置默认分类\r\n            if (this.categories.length > 0) {\r\n                this.currentCategoryId = this.categories[0].id;\r\n            }\r\n        },\r\n\r\n        async fetchMockMenuData() {\r\n            // 模拟网络延迟\r\n            await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n            this.categories = mockMenuData.categories;\r\n            this.products = mockMenuData.products;\r\n\r\n            // 构建allProducts\r\n            this.allProducts = [];\r\n            Object.values(this.products).forEach(categoryProducts => {\r\n                this.allProducts.push(...categoryProducts);\r\n            });\r\n\r\n            if (this.categories.length > 0) {\r\n                this.currentCategoryId = this.categories[0].id;\r\n            }\r\n        },\r\n\r\n        // 设置API模式\r\n        setApiMode(useReal) {\r\n            this.useRealApi = useReal;\r\n            console.log('API模式设置为:', useReal ? '真实API' : '模拟数据');\r\n        },\r\n\r\n        // 切换API模式（保留兼容性）\r\n        toggleApiMode(useReal = false) {\r\n            this.setApiMode(useReal);\r\n            // 重新加载数据\r\n            this.fetchMenuData();\r\n        },\r\n\r\n        // 添加分类\r\n        async addCategory(categoryData) {\r\n            try {\r\n                if (this.useRealApi) {\r\n                    const newCategory = await menuApi.addCategory(categoryData);\r\n                    this.categories.push(newCategory);\r\n                    this.products[newCategory.id] = [];\r\n                } else {\r\n                    // 模拟添加分类\r\n                    const newId = Math.max(...this.categories.map(c => c.id)) + 1;\r\n                    const newCategory = { id: newId, ...categoryData };\r\n                    this.categories.push(newCategory);\r\n                    this.products[newId] = [];\r\n                }\r\n                return true;\r\n            } catch (error) {\r\n                console.error('添加分类失败:', error);\r\n                throw error;\r\n            }\r\n        },\r\n\r\n        // 添加商品\r\n        async addProduct(productData) {\r\n            try {\r\n                if (this.useRealApi) {\r\n                    const newProduct = await menuApi.addProduct(productData);\r\n                    this.allProducts.push(newProduct);\r\n                    if (!this.products[newProduct.category]) {\r\n                        this.products[newProduct.category] = [];\r\n                    }\r\n                    this.products[newProduct.category].push(newProduct);\r\n                } else {\r\n                    // 模拟添加商品\r\n                    const newId = Math.max(...this.allProducts.map(p => p.id)) + 1;\r\n                    const newProduct = { id: newId, ...productData };\r\n                    this.allProducts.push(newProduct);\r\n                    if (!this.products[productData.categoryId]) {\r\n                        this.products[productData.categoryId] = [];\r\n                    }\r\n                    this.products[productData.categoryId].push(newProduct);\r\n                }\r\n                return true;\r\n            } catch (error) {\r\n                console.error('添加商品失败:', error);\r\n                throw error;\r\n            }\r\n        },\r\n    }\r\n});"],"names":["defineStore","uni","menuApi.getCategories","menuApi.getProducts","mockMenuData","menuApi.addCategory","menuApi.addProduct"],"mappings":"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"}