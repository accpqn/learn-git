{"version":3,"file":"request.js","sources":["api/request.js"],"sourcesContent":["import { useUserStore } from '@/store/user';\r\nimport config from '@/config/index';\r\n\r\n// 后端API基础地址配置\r\n// 使用配置文件中的API基础URL，支持不同环境的自动切换\r\nconst BASE_URL = `${config.API_BASE_URL}/api`;\r\n\r\nconst request = (options) => {\r\n    const userStore = useUserStore();\r\n\r\n    return new Promise((resolve, reject) => {\r\n        // 构建完整的请求URL\r\n        options.url = `${BASE_URL}${options.url}`;\r\n\r\n        // 添加统一的请求头\r\n        options.header = {\r\n            'Content-Type': 'application/json',\r\n            ...options.header\r\n        };\r\n\r\n        // 定义不需要认证的URL列表\r\n        const noAuthUrls = [\r\n            '/users/login/',\r\n            '/users/verify-and-login/',\r\n            '/users/send-code/',\r\n            '/token/refresh/'\r\n        ];\r\n\r\n        // 检查当前请求是否需要认证\r\n        const requiresAuth = !noAuthUrls.some(url => options.url.includes(url));\r\n\r\n        // 如果有Token且当前请求需要认证，则添加到请求头\r\n        if (userStore.token && requiresAuth) {\r\n            options.header.Authorization = `Bearer ${userStore.token}`;\r\n        }\r\n\r\n        uni.request({\r\n            ...options,\r\n            timeout: config.REQUEST_TIMEOUT, // 使用配置文件中的超时时间\r\n            success: async(response) => {\r\n                // 处理Token过期情况\r\n                if (response.statusCode === 401 && !options.url.includes('/token/refresh')) {\r\n                    try {\r\n                        // 尝试刷新Token\r\n                        const success = await userStore.refreshUserToken();\r\n                        if (success) {\r\n                            // 重试当前请求\r\n                            options.header.Authorization = `Bearer ${userStore.token}`;\r\n                            uni.request({\r\n                                ...options,\r\n                                success: (retryResponse) => {\r\n                                    resolve(retryResponse.data);\r\n                                },\r\n                                fail: (error) => {\r\n                                    reject(error);\r\n                                }\r\n                            });\r\n                            return;\r\n                        }\r\n                    } catch (error) {\r\n                        userStore.clearUserState();\r\n                        uni.reLaunch({\r\n                            url: '/pages/public/login'\r\n                        });\r\n                        reject(new Error('登录已过期，请重新登录'));\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // 处理其他错误状态\r\n                if (response.statusCode >= 400) {\r\n                    const error = new Error(response.data.message || response.data.detail || '请求失败');\r\n                    error.response = response;\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(response.data);\r\n            },\r\n            fail: (error) => {\r\n                console.error('Request failed:', error);\r\n                let errorMessage = '网络错误';\r\n\r\n                if (error.errMsg) {\r\n                    if (error.errMsg.includes('timeout')) {\r\n                        errorMessage = '请求超时，请检查网络连接';\r\n                    } else if (error.errMsg.includes('fail')) {\r\n                        errorMessage = '连接服务器失败';\r\n                    }\r\n                }\r\n\r\n                uni.showToast({\r\n                    title: errorMessage,\r\n                    icon: 'none',\r\n                    duration: 3000\r\n                });\r\n\r\n                const customError = new Error(errorMessage);\r\n                customError.originalError = error;\r\n                reject(customError);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nexport default request;"],"names":["config","useUserStore","uni"],"mappings":";;;;AAKA,MAAM,WAAW,GAAGA,aAAAA,OAAO,YAAY;AAElC,MAAC,UAAU,CAAC,YAAY;AACzB,QAAM,YAAYC,WAAAA;AAElB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEpC,YAAQ,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG;AAGvC,YAAQ,SAAS;AAAA,MACb,gBAAgB;AAAA,MAChB,GAAG,QAAQ;AAAA,IACvB;AAGQ,UAAM,aAAa;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACZ;AAGQ,UAAM,eAAe,CAAC,WAAW,KAAK,SAAO,QAAQ,IAAI,SAAS,GAAG,CAAC;AAGtE,QAAI,UAAU,SAAS,cAAc;AACjC,cAAQ,OAAO,gBAAgB,UAAU,UAAU,KAAK;AAAA,IAC3D;AAEDC,kBAAAA,MAAI,QAAQ;AAAA,MACR,GAAG;AAAA,MACH,SAASF,aAAM,OAAC;AAAA;AAAA,MAChB,SAAS,OAAM,aAAa;AAExB,YAAI,SAAS,eAAe,OAAO,CAAC,QAAQ,IAAI,SAAS,gBAAgB,GAAG;AACxE,cAAI;AAEA,kBAAM,UAAU,MAAM,UAAU;AAChC,gBAAI,SAAS;AAET,sBAAQ,OAAO,gBAAgB,UAAU,UAAU,KAAK;AACxDE,4BAAAA,MAAI,QAAQ;AAAA,gBACR,GAAG;AAAA,gBACH,SAAS,CAAC,kBAAkB;AACxB,0BAAQ,cAAc,IAAI;AAAA,gBAC7B;AAAA,gBACD,MAAM,CAAC,UAAU;AACb,yBAAO,KAAK;AAAA,gBACf;AAAA,cACjC,CAA6B;AACD;AAAA,YACH;AAAA,UACJ,SAAQ,OAAO;AACZ,sBAAU,eAAc;AACxBA,0BAAAA,MAAI,SAAS;AAAA,cACT,KAAK;AAAA,YACjC,CAAyB;AACD,mBAAO,IAAI,MAAM,aAAa,CAAC;AAC/B;AAAA,UACH;AAAA,QACJ;AAGD,YAAI,SAAS,cAAc,KAAK;AAC5B,gBAAM,QAAQ,IAAI,MAAM,SAAS,KAAK,WAAW,SAAS,KAAK,UAAU,MAAM;AAC/E,gBAAM,WAAW;AACjB,iBAAO,KAAK;AACZ;AAAA,QACH;AAED,gBAAQ,SAAS,IAAI;AAAA,MACxB;AAAA,MACD,MAAM,CAAC,UAAU;AACbA,mEAAc,mBAAmB,KAAK;AACtC,YAAI,eAAe;AAEnB,YAAI,MAAM,QAAQ;AACd,cAAI,MAAM,OAAO,SAAS,SAAS,GAAG;AAClC,2BAAe;AAAA,UAClB,WAAU,MAAM,OAAO,SAAS,MAAM,GAAG;AACtC,2BAAe;AAAA,UAClB;AAAA,QACJ;AAEDA,sBAAAA,MAAI,UAAU;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,UACN,UAAU;AAAA,QAC9B,CAAiB;AAED,cAAM,cAAc,IAAI,MAAM,YAAY;AAC1C,oBAAY,gBAAgB;AAC5B,eAAO,WAAW;AAAA,MACrB;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;;"}