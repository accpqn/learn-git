{"version":3,"file":"navigation-theme.js","sources":["utils/navigation-theme.js"],"sourcesContent":["/**\n * 导航栏主题工具函数\n * 用于动态设置页面导航栏的主题颜色\n */\n\nimport { useThemeStore } from '@/store/theme';\n\n// 防抖定时器\nlet navigationBarDebounceTimer = null;\n\n/**\n * 设置当前页面的导航栏主题\n * @param {Object} options - 配置选项\n * @param {boolean} options.useTheme - 是否使用主题颜色，默认true\n * @param {string} options.backgroundColor - 自定义背景色\n * @param {string} options.textStyle - 文字样式 'black' | 'white'\n * @param {string} options.title - 导航栏标题\n */\nexport function setNavigationBarTheme(options = {}) {\n    // 防抖处理\n    if (navigationBarDebounceTimer) {\n        clearTimeout(navigationBarDebounceTimer);\n    }\n\n    navigationBarDebounceTimer = setTimeout(() => {\n        try {\n            const themeStore = useThemeStore();\n            const {\n                useTheme = true,\n                backgroundColor,\n                textStyle = 'white',\n                title\n            } = options;\n\n            // 获取主题颜色\n            const bgColor = useTheme\n                ? (backgroundColor || themeStore.currentTheme.primaryColor)\n                : (backgroundColor || '#FF69B4');\n\n            // 设置导航栏样式\n            const navigationBarStyle = {\n                backgroundColor: bgColor,\n                textStyle: textStyle\n            };\n\n            // 如果提供了标题，也设置标题\n            if (title) {\n                navigationBarStyle.title = title;\n            }\n\n            // 调用uni-app API设置导航栏\n            uni.setNavigationBarColor({\n                frontColor: textStyle === 'white' ? '#ffffff' : '#000000',\n                backgroundColor: bgColor,\n                animation: {\n                    duration: 300,\n                    timingFunc: 'easeIn'\n                }\n            });\n\n            // 如果有标题，设置标题\n            if (title) {\n                uni.setNavigationBarTitle({\n                    title: title\n                });\n            }\n\n            console.log('导航栏主题已设置:', navigationBarStyle);\n        } catch (error) {\n            console.error('设置导航栏主题失败:', error);\n        }\n    }, 100);\n}\n\n/**\n * 重置导航栏为默认主题\n */\nexport function resetNavigationBarTheme() {\n    try {\n        uni.setNavigationBarColor({\n            frontColor: '#000000',\n            backgroundColor: '#F8F8F8',\n            animation: {\n                duration: 300,\n                timingFunc: 'easeIn'\n            }\n        });\n        console.log('导航栏主题已重置为默认');\n    } catch (error) {\n        console.error('重置导航栏主题失败:', error);\n    }\n}\n\n/**\n * 监听主题变化并自动更新导航栏\n * @param {Object} options - 配置选项\n * @returns {Function} 取消监听的函数\n */\nexport function watchNavigationBarTheme(options = {}) {\n    const { textStyle = 'white' } = options;\n\n    // 防抖处理，避免重复调用\n    let debounceTimer = null;\n\n    const themeChangeHandler = (newTheme) => {\n        if (debounceTimer) {\n            clearTimeout(debounceTimer);\n        }\n\n        debounceTimer = setTimeout(() => {\n            setNavigationBarTheme({\n                useTheme: true,\n                textStyle: textStyle\n            });\n        }, 100);\n    };\n\n    // 监听主题变化事件\n    uni.$on('themeChanged', themeChangeHandler);\n\n    // 返回取消监听的函数\n    return () => {\n        if (debounceTimer) {\n            clearTimeout(debounceTimer);\n        }\n        uni.$off('themeChanged', themeChangeHandler);\n    };\n}\n\n/**\n * 页面主题导航栏混入\n * 在页面的 onShow 中调用\n */\nexport function initPageNavigationTheme(options = {}) {\n    const {\n        title,\n        textStyle = 'white',\n        useTheme = true\n    } = options;\n\n    // 设置导航栏主题\n    setNavigationBarTheme({\n        useTheme,\n        textStyle,\n        title\n    });\n\n    // 简化逻辑：每次都直接设置，不进行复杂的状态管理\n    // 由于已经在setNavigationBarTheme中做了防抖，这里不会有性能问题\n\n    return () => {}; // 返回空函数以保持接口一致\n}\n\n/**\n * 获取适合当前主题的导航栏配置\n */\nexport function getNavigationBarConfig() {\n    const themeStore = useThemeStore();\n    \n    return {\n        backgroundColor: themeStore.currentTheme.primaryColor,\n        textStyle: 'white',\n        frontColor: '#ffffff'\n    };\n}\n\n/**\n * 批量更新多个页面的导航栏主题\n * @param {Array} pages - 页面路径数组\n * @param {Object} options - 配置选项\n */\nexport function updatePagesNavigationTheme(pages = [], options = {}) {\n    const { textStyle = 'white' } = options;\n    \n    pages.forEach(pagePath => {\n        try {\n            // 这里只能在当前页面设置，无法跨页面设置\n            // 需要在每个页面的 onShow 中调用 initPageNavigationTheme\n            console.log(`页面 ${pagePath} 需要在 onShow 中调用 initPageNavigationTheme`);\n        } catch (error) {\n            console.error(`更新页面 ${pagePath} 导航栏主题失败:`, error);\n        }\n    });\n}\n\n/**\n * 设置TabBar主题颜色\n */\nexport function setTabBarTheme() {\n    try {\n        const themeStore = useThemeStore();\n\n        uni.setTabBarStyle({\n            color: '#909399',\n            selectedColor: themeStore.currentTheme.primaryColor,\n            backgroundColor: '#ffffff',\n            borderStyle: 'white'\n        });\n\n        console.log('TabBar主题已设置:', themeStore.currentTheme.primaryColor);\n    } catch (error) {\n        console.error('设置TabBar主题失败:', error);\n    }\n}\n\n/**\n * 检查当前环境是否支持动态导航栏\n */\nexport function isSupportDynamicNavigationBar() {\n    // #ifdef H5\n    return true;\n    // #endif\n\n    // #ifdef MP-WEIXIN\n    return true;\n    // #endif\n\n    // #ifdef APP-PLUS\n    return true;\n    // #endif\n\n    // #ifndef H5 || MP-WEIXIN || APP-PLUS\n    return false;\n    // #endif\n}\n"],"names":["useThemeStore","uni"],"mappings":";;;AAQA,IAAI,6BAA6B;AAU1B,SAAS,sBAAsB,UAAU,IAAI;AAEhD,MAAI,4BAA4B;AAC5B,iBAAa,0BAA0B;AAAA,EAC1C;AAED,+BAA6B,WAAW,MAAM;AAC1C,QAAI;AACA,YAAM,aAAaA,YAAAA;AACnB,YAAM;AAAA,QACF,WAAW;AAAA,QACX;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,MACH,IAAG;AAGJ,YAAM,UAAU,WACT,mBAAmB,WAAW,aAAa,eAC3C,mBAAmB;AAG1B,YAAM,qBAAqB;AAAA,QACvB,iBAAiB;AAAA,QACjB;AAAA,MAChB;AAGY,UAAI,OAAO;AACP,2BAAmB,QAAQ;AAAA,MAC9B;AAGDC,oBAAAA,MAAI,sBAAsB;AAAA,QACtB,YAAY,cAAc,UAAU,YAAY;AAAA,QAChD,iBAAiB;AAAA,QACjB,WAAW;AAAA,UACP,UAAU;AAAA,UACV,YAAY;AAAA,QACf;AAAA,MACjB,CAAa;AAGD,UAAI,OAAO;AACPA,sBAAAA,MAAI,sBAAsB;AAAA,UACtB;AAAA,QACpB,CAAiB;AAAA,MACJ;AAEDA,oBAAY,MAAA,MAAA,OAAA,mCAAA,aAAa,kBAAkB;AAAA,IAC9C,SAAQ,OAAO;AACZA,oBAAc,MAAA,MAAA,SAAA,mCAAA,cAAc,KAAK;AAAA,IACpC;AAAA,EACJ,GAAE,GAAG;AACV;AA6DO,SAAS,wBAAwB,UAAU,IAAI;AAClD,QAAM;AAAA,IACF;AAAA,IACA,YAAY;AAAA,IACZ,WAAW;AAAA,EACd,IAAG;AAGJ,wBAAsB;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,EACR,CAAK;AAKD,SAAO,MAAM;AAAA,EAAA;AACjB;;"}