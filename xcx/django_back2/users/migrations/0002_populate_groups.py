# Generated by Django 4.2.5 on 2024-07-26 10:00

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth import get_user_model


def create_groups_and_permissions(apps, schema_editor):
    """
    此函数将在数据库迁移时被调用，用于自动化创建用户组、权限和演示账户。
    """
    # 导入真正的 User 模型及其管理器以使用 create_user 方法
    User = get_user_model()

    # --- 1. 创建"内容管理员"用户组 ---
    admin_group, created = Group.objects.get_or_create(name='内容管理员')
    if created:
        print('成功创建 "内容管理员" 用户组')

    # --- 2. 为用户组分配权限 ---
    # 定义"内容管理员"应有的权限
    # codename 是权限的唯一标识符，通常格式为: <action>_<modelname>
    permissions_codenames = [
        'view_user',         # 查看用户
        'add_couplebinding',    # 添加情侣绑定
        'change_couplebinding', # 修改情侣绑定
        'delete_couplebinding', # 删除情侣绑定
        'view_couplebinding',   # 查看情侣绑定
    ]
    
    # 查找这些权限并添加到用户组
    for codename in permissions_codenames:
        try:
            # 权限是与模型（ContentType）关联的
            perm = Permission.objects.get(codename=codename)
            admin_group.permissions.add(perm)
        except Permission.DoesNotExist:
            print(f'警告: 权限 "{codename}" 不存在，已跳过。')
    print('已为 "内容管理员" 分配权限')

    # --- 3. 创建演示账户 ---
    # 使用 create_user 方法，该方法会正确处理密码哈希
    if not User.objects.filter(username='admin_demo').exists():
        admin_user = User.objects.create_user(
            username='admin_demo',
            password='complexpassword123',
            is_staff=True,
            is_superuser=False
        )
        admin_user.groups.add(admin_group)
        print('成功创建演示用管理员账户: admin_demo (密码: complexpassword123)')

    if not User.objects.filter(username='user_demo').exists():
        User.objects.create_user(
            username='user_demo',
            password='complexpassword123',
            is_staff=False,
            is_superuser=False
        )
        print('成功创建演示用普通用户账户: user_demo (密码: complexpassword123)')


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
        # 注意：这里可能需要添加对 auth 应用迁移的依赖，确保 Group 和 Permission 模型已创建
        ('auth', '0012_alter_user_first_name_max_length'), 
    ]

    operations = [
        migrations.RunPython(create_groups_and_permissions),
    ]
