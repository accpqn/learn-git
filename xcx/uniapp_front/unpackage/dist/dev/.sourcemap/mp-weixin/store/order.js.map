{"version":3,"file":"order.js","sources":["store/order.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport * as orderApi from '@/api/order';\r\nimport Storage, { STORAGE_KEYS } from '@/utils/storage';\r\n\r\nexport const useOrderStore = defineStore('order', {\r\n    state: () => ({\r\n        sentOrders: [],\r\n        receivedOrders: [],\r\n        currentOrderDetail: null,\r\n        status: 'idle',\r\n        error: null\r\n    }),\r\n\r\n    getters: {\r\n        allOrders: (state) => [...state.sentOrders, ...state.receivedOrders].sort((a, b) => new Date(b.createTime) - new Date(a.createTime))\r\n    },\r\n\r\n    actions: {\r\n        async createOrder(orderData) {\r\n            this.status = 'loading';\r\n            try {\r\n                console.log('OrderStore createOrder - 原始数据:', orderData);\r\n\r\n                // 转换前端购物车数据为后端API格式\r\n                const apiOrderData = {\r\n                    items: orderData.items.map(item => {\r\n                        console.log('处理订单项:', item);\r\n                        // 确保正确获取商品ID\r\n                        const productId = item.product || (item.item && item.item.id);\r\n                        if (!productId) {\r\n                            console.error('无法获取商品ID:', item);\r\n                            throw new Error('商品ID缺失');\r\n                        }\r\n                        return {\r\n                            product: productId,\r\n                            quantity: item.quantity\r\n                        };\r\n                    }),\r\n                    notes: orderData.notes || orderData.note || ''  // 兼容不同的字段名\r\n                };\r\n\r\n                console.log('Creating order with data:', apiOrderData);\r\n\r\n                // 调用后端API创建订单\r\n                const createdOrder = await orderApi.createOrder(apiOrderData);\r\n\r\n                console.log('Order created successfully:', createdOrder);\r\n\r\n                // 转换后端数据格式为前端格式\r\n                const normalizedOrder = this.normalizeOrderData(createdOrder);\r\n                normalizedOrder.type = 'sent'; // 标记为发送的订单\r\n\r\n                // 添加到发送订单列表\r\n                this.sentOrders.unshift(normalizedOrder);\r\n\r\n                // 保存到本地存储\r\n                this.saveOrdersToLocal();\r\n\r\n                this.status = 'success';\r\n                return normalizedOrder;\r\n            } catch (err) {\r\n                this.status = 'error';\r\n                this.error = err.message;\r\n                console.error('Failed to create order:', err);\r\n                throw err;\r\n            }\r\n        },\r\n\r\n        // 从本地存储加载订单数据\r\n        loadOrdersFromLocal() {\r\n            this.sentOrders = Storage.get(STORAGE_KEYS.SENT_ORDERS, []);\r\n            this.receivedOrders = Storage.get(STORAGE_KEYS.RECEIVED_ORDERS, []);\r\n        },\r\n\r\n        // 保存订单数据到本地存储\r\n        saveOrdersToLocal() {\r\n            Storage.set(STORAGE_KEYS.SENT_ORDERS, this.sentOrders);\r\n            Storage.set(STORAGE_KEYS.RECEIVED_ORDERS, this.receivedOrders);\r\n        },\r\n\r\n        // 标准化后端订单数据格式\r\n        normalizeOrderData(backendOrder) {\r\n            return {\r\n                id: backendOrder.id,\r\n                creator: backendOrder.creator,\r\n                creator_username: backendOrder.creator_username,\r\n                status: backendOrder.status,\r\n                notes: backendOrder.notes,\r\n                note: backendOrder.notes, // 兼容前端使用note字段\r\n                total_price: backendOrder.total_price,\r\n                totalPrice: backendOrder.total_price, // 兼容前端使用totalPrice字段\r\n                created_at: backendOrder.created_at,\r\n                createTime: backendOrder.created_at, // 兼容前端使用createTime字段\r\n                updated_at: backendOrder.updated_at,\r\n                items: backendOrder.items || [],\r\n                created_by_current_user: backendOrder.created_by_current_user\r\n            };\r\n        },\r\n\r\n        // 检查订单是否有变化（新增、删除、状态变化）\r\n        checkOrderChanges(oldOrders, newOrders) {\r\n            // 数量不同\r\n            if (oldOrders.length !== newOrders.length) {\r\n                return true;\r\n            }\r\n\r\n            // 检查每个订单的状态和更新时间\r\n            for (const newOrder of newOrders) {\r\n                const oldOrder = oldOrders.find(o => o.id === newOrder.id);\r\n                if (!oldOrder) {\r\n                    // 新订单\r\n                    return true;\r\n                }\r\n                if (oldOrder.status !== newOrder.status) {\r\n                    // 状态变化\r\n                    console.log(`订单 ${newOrder.id} 状态变化: ${oldOrder.status} -> ${newOrder.status}`);\r\n                    return true;\r\n                }\r\n                if (oldOrder.updated_at !== newOrder.updated_at) {\r\n                    // 更新时间变化\r\n                    console.log(`订单 ${newOrder.id} 更新时间变化`);\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        async fetchSentOrders() {\r\n            this.status = 'loading';\r\n            try {\r\n                console.log('Fetching sent orders...');\r\n                const data = await orderApi.getOrders();\r\n\r\n                // 过滤出发送的订单（当前用户是创建者）并标准化数据格式\r\n                const newSentOrders = data\r\n                    .filter(order => order.created_by_current_user)\r\n                    .map(order => {\r\n                        const normalized = this.normalizeOrderData(order);\r\n                        normalized.type = 'sent';\r\n                        return normalized;\r\n                    });\r\n\r\n                // 检查是否有新订单或状态变化\r\n                const hasChanges = this.checkOrderChanges(this.sentOrders, newSentOrders);\r\n                if (hasChanges) {\r\n                    console.log('发现发送订单变化，更新数据');\r\n                    this.sentOrders = newSentOrders;\r\n                    this.saveOrdersToLocal();\r\n                }\r\n\r\n                console.log('Sent orders fetched:', this.sentOrders.length, '条');\r\n                this.status = 'success';\r\n            } catch (err) {\r\n                this.status = 'error';\r\n                this.error = err.message;\r\n                console.error('Failed to fetch sent orders:', err);\r\n            }\r\n        },\r\n\r\n        async fetchReceivedOrders() {\r\n            this.status = 'loading';\r\n            try {\r\n                console.log('Fetching received orders...');\r\n                const data = await orderApi.getOrders();\r\n\r\n                // 过滤出接收的订单（当前用户不是创建者）并标准化数据格式\r\n                const newReceivedOrders = data\r\n                    .filter(order => !order.created_by_current_user)\r\n                    .map(order => {\r\n                        const normalized = this.normalizeOrderData(order);\r\n                        normalized.type = 'received';\r\n                        return normalized;\r\n                    });\r\n\r\n                // 检查是否有新订单或状态变化\r\n                const hasChanges = this.checkOrderChanges(this.receivedOrders, newReceivedOrders);\r\n                if (hasChanges) {\r\n                    console.log('发现接收订单变化，更新数据');\r\n                    this.receivedOrders = newReceivedOrders;\r\n                    this.saveOrdersToLocal();\r\n                }\r\n\r\n                console.log('Received orders fetched:', this.receivedOrders.length, '条');\r\n                this.status = 'success';\r\n            } catch (err) {\r\n                this.status = 'error';\r\n                this.error = err.message;\r\n                console.error('Failed to fetch received orders:', err);\r\n            }\r\n        },\r\n\r\n        async fetchOrderDetail(id) {\r\n            this.status = 'loading';\r\n            try {\r\n                // 先从本地查找\r\n                let order = this.sentOrders.find(o => o.id == id) || this.receivedOrders.find(o => o.id == id);\r\n\r\n                if (order) {\r\n                    this.currentOrderDetail = order;\r\n                } else {\r\n                    // 从API获取订单详情\r\n                    console.log('Fetching order detail from API for id:', id);\r\n                    const data = await orderApi.getOrderDetail(id);\r\n                    const normalizedOrder = this.normalizeOrderData(data);\r\n\r\n                    // 判断订单类型\r\n                    normalizedOrder.type = data.created_by_current_user ? 'sent' : 'received';\r\n\r\n                    this.currentOrderDetail = normalizedOrder;\r\n                }\r\n\r\n                console.log('Order detail loaded:', this.currentOrderDetail);\r\n                this.status = 'success';\r\n            } catch (err) {\r\n                this.status = 'error';\r\n                this.error = err.message;\r\n                console.error('Failed to fetch order detail:', err);\r\n            }\r\n        },\r\n\r\n        async updateOrderItem({ orderId, itemId, data }) {\r\n            try {\r\n                // 更新本地数据\r\n                const order = this.sentOrders.find(o => o.id === orderId) || this.receivedOrders.find(o => o.id === orderId);\r\n                if (order) {\r\n                    const item = order.items.find(i => i.item.id === itemId);\r\n                    if (item) {\r\n                        Object.assign(item, data);\r\n                        this.saveOrdersToLocal();\r\n                    }\r\n                }\r\n\r\n                // 如果有API，同步到服务器\r\n                if (orderApi.updateOrderItem) {\r\n                    await orderApi.updateOrderItem(orderId, itemId, data);\r\n                }\r\n\r\n                // 重新获取订单详情以同步UI\r\n                await this.fetchOrderDetail(orderId);\r\n            } catch (err) {\r\n                console.error('Failed to update order item:', err);\r\n                throw err;\r\n            }\r\n        },\r\n\r\n        // 初始化订单数据\r\n        initOrders() {\r\n            this.loadOrdersFromLocal();\r\n        }\r\n    }\r\n});"],"names":["defineStore","uni","orderApi.createOrder","Storage","STORAGE_KEYS","orderApi.getOrders","orderApi.getOrderDetail","orderApi.updateOrderItem"],"mappings":"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"}