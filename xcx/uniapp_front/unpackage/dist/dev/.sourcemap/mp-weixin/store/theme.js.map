{"version":3,"file":"theme.js","sources":["store/theme.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { getThemeConfig, saveThemeConfig, presetThemes } from '@/api/theme';\n\nexport const useThemeStore = defineStore('theme', {\n    state: () => ({\n        // 当前主题配置\n        currentTheme: {\n            primaryColor: '#FF69B4',\n            secondaryColor: '#FF1493',\n            backgroundColor: '#FFF5F8',\n            themeName: '粉色恋人'\n        },\n        \n        // 预设主题列表\n        presetThemes: presetThemes,\n        \n        // 加载状态\n        loading: false,\n        \n        // 是否已初始化\n        initialized: false\n    }),\n\n    getters: {\n        // 获取当前主题的CSS变量\n        cssVariables: (state) => {\n            return {\n                '--theme-primary': state.currentTheme.primaryColor,\n                '--theme-secondary': state.currentTheme.secondaryColor,\n                '--theme-background': state.currentTheme.backgroundColor,\n                '--theme-primary-light': state.currentTheme.primaryColor + '20',\n                '--theme-secondary-light': state.currentTheme.secondaryColor + '20'\n            };\n        },\n\n        // 获取当前主题名称\n        currentThemeName: (state) => {\n            const preset = state.presetThemes.find(theme => \n                theme.primaryColor === state.currentTheme.primaryColor &&\n                theme.secondaryColor === state.currentTheme.secondaryColor &&\n                theme.backgroundColor === state.currentTheme.backgroundColor\n            );\n            return preset ? preset.name : state.currentTheme.themeName || '自定义主题';\n        },\n\n        // 判断是否为预设主题\n        isPresetTheme: (state) => {\n            return state.presetThemes.some(theme => \n                theme.primaryColor === state.currentTheme.primaryColor &&\n                theme.secondaryColor === state.currentTheme.secondaryColor &&\n                theme.backgroundColor === state.currentTheme.backgroundColor\n            );\n        }\n    },\n\n    actions: {\n        // 初始化主题\n        async initTheme() {\n            if (this.initialized) return;\n            \n            try {\n                // 先从本地存储加载\n                const localTheme = this.loadFromStorage();\n                if (localTheme) {\n                    this.currentTheme = { ...localTheme };\n                    this.applyTheme();\n                }\n\n                // 如果用户已登录，尝试从服务器加载\n                if (this.isLoggedIn()) {\n                    await this.fetchThemeFromServer();\n                }\n\n                // 设置登录监听器\n                this.setupLoginListener();\n\n                this.initialized = true;\n            } catch (error) {\n                console.error('初始化主题失败:', error);\n                // 使用默认主题\n                this.currentTheme = { ...presetThemes[0] };\n                this.applyTheme();\n                this.initialized = true;\n            }\n        },\n\n        // 设置登录监听器\n        setupLoginListener() {\n            // 监听用户登录成功事件\n            uni.$on('userLoginSuccess', async (data) => {\n                console.log('收到用户登录成功事件，开始同步主题配置');\n                try {\n                    await this.fetchThemeFromServer();\n                    console.log('登录后主题配置同步成功');\n                } catch (error) {\n                    console.warn('登录后主题配置同步失败:', error);\n                }\n            });\n        },\n\n        // 从服务器获取主题配置\n        async fetchThemeFromServer() {\n            if (!this.isLoggedIn()) {\n                console.log('用户未登录，跳过服务器主题获取');\n                return;\n            }\n\n            this.loading = true;\n            try {\n                const serverTheme = await getThemeConfig();\n                if (serverTheme) {\n                    this.currentTheme = {\n                        primaryColor: serverTheme.primary_color || serverTheme.primaryColor,\n                        secondaryColor: serverTheme.secondary_color || serverTheme.secondaryColor,\n                        backgroundColor: serverTheme.background_color || serverTheme.backgroundColor,\n                        themeName: serverTheme.theme_name || serverTheme.themeName || this.currentThemeName\n                    };\n                    this.applyTheme();\n                    this.saveToStorage();\n                }\n            } catch (error) {\n                console.error('获取服务器主题配置失败:', error);\n                // 如果是401错误，说明token可能过期，只使用本地主题\n                if (error.message && error.message.includes('401')) {\n                    console.log('认证失败，使用本地主题配置');\n                } else if (error.message && (error.message.includes('没有激活的绑定关系') || error.message.includes('403'))) {\n                    // 403错误：新用户没有绑定关系，这是正常情况\n                    console.log('新用户没有绑定关系，使用默认主题');\n                    this.applyTheme(); // 应用当前主题（默认主题）\n                } else {\n                    console.log('其他错误，使用本地主题配置');\n                    this.applyTheme(); // 应用当前主题\n                }\n            } finally {\n                this.loading = false;\n            }\n        },\n\n        // 保存主题配置到服务器\n        async saveThemeToServer() {\n            if (!this.isLoggedIn()) {\n                // 未登录时只保存到本地\n                this.saveToStorage();\n                return;\n            }\n\n            this.loading = true;\n            try {\n                const themeData = {\n                    primary_color: this.currentTheme.primaryColor,\n                    secondary_color: this.currentTheme.secondaryColor,\n                    background_color: this.currentTheme.backgroundColor,\n                    theme_name: this.currentTheme.themeName || this.currentThemeName\n                };\n\n                await saveThemeConfig(themeData);\n                this.saveToStorage();\n                console.log('主题配置已保存到服务器');\n            } catch (error) {\n                console.error('保存主题配置到服务器失败:', error);\n                // 即使服务器保存失败，也保存到本地\n                this.saveToStorage();\n                throw error;\n            } finally {\n                this.loading = false;\n            }\n        },\n\n        // 应用预设主题\n        applyPresetTheme(preset) {\n            this.currentTheme = {\n                primaryColor: preset.primaryColor,\n                secondaryColor: preset.secondaryColor,\n                backgroundColor: preset.backgroundColor,\n                themeName: preset.name\n            };\n            this.applyTheme();\n            this.saveToStorage();\n        },\n\n        // 更新主题颜色\n        updateThemeColor(colorType, color) {\n            if (colorType === 'primary') {\n                this.currentTheme.primaryColor = color;\n            } else if (colorType === 'secondary') {\n                this.currentTheme.secondaryColor = color;\n            } else if (colorType === 'background') {\n                this.currentTheme.backgroundColor = color;\n            }\n            \n            // 更新名称为自定义主题\n            if (!this.isPresetTheme) {\n                this.currentTheme.themeName = '自定义主题';\n            }\n            \n            this.applyTheme();\n            this.saveToStorage();\n        },\n\n        // 应用主题到页面\n        applyTheme() {\n            try {\n                // 防抖处理，避免短时间内重复触发\n                if (this._applyThemeTimer) {\n                    clearTimeout(this._applyThemeTimer);\n                }\n\n                this._applyThemeTimer = setTimeout(() => {\n                    // 在uni-app中，我们通过CSS变量和本地存储来实现主题切换\n                    // 触发页面重新渲染或通过事件通知组件更新\n                    uni.$emit('themeChanged', this.currentTheme);\n                    console.log('主题已应用:', this.currentTheme);\n                }, 50);\n            } catch (error) {\n                console.error('应用主题失败:', error);\n            }\n        },\n\n        // 保存到本地存储\n        saveToStorage() {\n            try {\n                uni.setStorageSync('themeConfig', this.currentTheme);\n            } catch (error) {\n                console.error('保存主题到本地存储失败:', error);\n            }\n        },\n\n        // 从本地存储加载\n        loadFromStorage() {\n            try {\n                const themeConfig = uni.getStorageSync('themeConfig');\n                return themeConfig || null;\n            } catch (error) {\n                console.error('从本地存储加载主题失败:', error);\n                return null;\n            }\n        },\n\n        // 检查是否已登录\n        isLoggedIn() {\n            try {\n                const token = uni.getStorageSync('token');\n                return !!token;\n            } catch (error) {\n                return false;\n            }\n        },\n\n        // 重置为默认主题\n        resetToDefault() {\n            this.currentTheme = { ...presetThemes[0] };\n            this.applyTheme();\n            this.saveToStorage();\n        }\n    }\n});\n"],"names":["defineStore","presetThemes","uni","getThemeConfig","saveThemeConfig"],"mappings":"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"}