{"version":3,"file":"user.js","sources":["store/user.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport { login, verifyAndLogin, sendVerificationCode, refreshToken, getCurrentUser } from '@/api/user';\r\nimport { useCoupleStore } from './couple';\r\n\r\nexport const useUserStore = defineStore('user', {\r\n    state: () => ({\r\n        // 用户信息\r\n        userInfo: null,\r\n        // token信息\r\n        token: null,\r\n        refreshToken: null,\r\n        // 注册状态\r\n        registerStatus: 'idle', // 'idle' | 'pending' | 'success' | 'error'\r\n        registerError: null,\r\n        // 防抖标记\r\n        _fetchingUser: false\r\n    }),\r\n\r\n    getters: {\r\n        // 登录状态 - 基于用户信息和token判断\r\n        isLoggedIn() {\r\n            return !!(this.userInfo && this.token);\r\n        },\r\n        userId() {\r\n            if (!this.userInfo) return null;\r\n            return this.userInfo.id;\r\n        },\r\n        username() {\r\n            if (!this.userInfo) return null;\r\n            return this.userInfo.username;\r\n        },\r\n        email() {\r\n            if (!this.userInfo) return null;\r\n            return this.userInfo.email;\r\n        }\r\n    },\r\n\r\n    actions: {\r\n        // 设置用户信息\r\n        setUserInfo(info) {\r\n            this.userInfo = info;\r\n            this.saveUserToLocal();\r\n        },\r\n\r\n        // 保存用户信息到本地存储\r\n        saveUserToLocal() {\r\n            if (this.userInfo) {\r\n                uni.setStorageSync('userInfo', this.userInfo);\r\n            }\r\n        },\r\n\r\n        // 设置token\r\n        setToken(token, refresh) {\r\n            this.token = token;\r\n            this.refreshToken = refresh;\r\n\r\n            // 存储到本地\r\n            uni.setStorageSync('token', token);\r\n            uni.setStorageSync('refreshToken', refresh);\r\n        },\r\n\r\n        // 清除用户状态\r\n        clearUserState() {\r\n            this.userInfo = null;\r\n            this.token = null;\r\n            this.refreshToken = null;\r\n\r\n            // 清除本地存储\r\n            uni.removeStorageSync('token');\r\n            uni.removeStorageSync('refreshToken');\r\n            uni.removeStorageSync('userInfo');\r\n        },\r\n\r\n        // 登录\r\n        async login(loginData) {\r\n            try {\r\n                const response = await login(loginData);\r\n                const { token, user } = response;\r\n\r\n                this.setToken(token.access, token.refresh);\r\n                this.setUserInfo(user);\r\n\r\n                // 登录API返回的用户信息可能不完整，异步获取完整信息\r\n                // 不等待结果，避免阻塞登录流程\r\n                this.fetchCurrentUser().catch(err => {\r\n                    console.warn('Failed to fetch complete user info after login:', err);\r\n                });\r\n\r\n                // 登录成功后同步主题配置\r\n                this.syncThemeAfterLogin();\r\n\r\n                return true;\r\n            } catch (error) {\r\n                this.clearUserState();\r\n                throw error;\r\n            }\r\n        },\r\n\r\n        // 验证码登录\r\n        async loginWithCode(loginData) {\r\n            try {\r\n                const response = await verifyAndLogin(loginData);\r\n                const { token, user } = response;\r\n\r\n                this.setToken(token.access, token.refresh);\r\n                this.setUserInfo(user);\r\n\r\n                // 登录API返回的用户信息可能不完整，异步获取完整信息\r\n                // 不等待结果，避免阻塞登录流程\r\n                this.fetchCurrentUser().catch(err => {\r\n                    console.warn('Failed to fetch complete user info after login:', err);\r\n                });\r\n\r\n                // 登录成功后同步主题配置\r\n                this.syncThemeAfterLogin();\r\n\r\n                return true;\r\n            } catch (error) {\r\n                this.clearUserState();\r\n                throw error;\r\n            }\r\n        },\r\n\r\n        // 发送验证码\r\n        async sendVerificationCode(email) {\r\n            try {\r\n                await sendVerificationCode({ email });\r\n                return true;\r\n            } catch (error) {\r\n                throw error;\r\n            }\r\n        },\r\n\r\n        // 注册\r\n        async register(registerData) {\r\n            this.registerStatus = 'pending';\r\n            this.registerError = null;\r\n\r\n            try {\r\n                const coupleStore = useCoupleStore();\r\n                const response = await verifyAndLogin(registerData);\r\n                const { token, user } = response;\r\n\r\n                this.setToken(token.access, token.refresh);\r\n                this.setUserInfo(user);\r\n                coupleStore.setBindingInfo(user.binding);\r\n\r\n                // 注册成功后同步主题配置\r\n                this.syncThemeAfterLogin();\r\n\r\n                this.registerStatus = 'success';\r\n                return true;\r\n            } catch (error) {\r\n                this.registerStatus = 'error';\r\n                this.registerError = error.message;\r\n                throw error;\r\n            }\r\n        },\r\n\r\n        // 登出\r\n        logout() {\r\n            this.clearUserState();\r\n        },\r\n\r\n        // 刷新token\r\n        async refreshUserToken() {\r\n            if (!this.refreshToken) return false;\r\n\r\n            try {\r\n                const response = await refreshToken(this.refreshToken);\r\n                const { access } = response;\r\n\r\n                this.setToken(access, this.refreshToken);\r\n                return true;\r\n            } catch (error) {\r\n                this.clearUserState();\r\n                return false;\r\n            }\r\n        },\r\n\r\n        // 获取当前用户信息\r\n        async fetchCurrentUser() {\r\n            // 如果没有token，直接返回\r\n            if (!this.token) {\r\n                console.log('No token available, skipping fetchCurrentUser');\r\n                return false;\r\n            }\r\n\r\n            // 防抖：如果正在获取用户信息，直接返回\r\n            if (this._fetchingUser) {\r\n                console.log('Already fetching user info, skipping duplicate request');\r\n                return false;\r\n            }\r\n\r\n            this._fetchingUser = true;\r\n\r\n            try {\r\n                const coupleStore = useCoupleStore();\r\n                console.log('Fetching current user info...');\r\n                const response = await getCurrentUser();\r\n                console.log('Received user info:', response);\r\n\r\n                // 后端直接返回用户数据，不是包装在user字段中\r\n                const { binding, ...userData } = response;\r\n                this.setUserInfo(userData);\r\n                coupleStore.setBindingInfo(binding);\r\n\r\n                console.log('User info updated successfully');\r\n                return true;\r\n            } catch (error) {\r\n                console.error('Failed to fetch current user:', error);\r\n                // 如果是401错误，清除用户状态\r\n                if (error.response && error.response.statusCode === 401) {\r\n                    console.log('Token expired, clearing user state');\r\n                    this.clearUserState();\r\n                }\r\n                return false;\r\n            } finally {\r\n                this._fetchingUser = false;\r\n            }\r\n        },\r\n\r\n        // 初始化状态\r\n        initFromStorage() {\r\n            const token = uni.getStorageSync('token');\r\n            const refreshToken = uni.getStorageSync('refreshToken');\r\n            const userInfo = uni.getStorageSync('userInfo');\r\n\r\n            if (token && refreshToken) {\r\n                this.token = token;\r\n                this.refreshToken = refreshToken;\r\n\r\n                // 如果有本地用户信息，先加载它\r\n                if (userInfo) {\r\n                    this.userInfo = userInfo;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // 登录后同步主题配置\r\n        syncThemeAfterLogin() {\r\n            try {\r\n                // 发送登录成功事件，让主题Store监听并处理\r\n                uni.$emit('userLoginSuccess', {\r\n                    userId: this.userInfo?.id,\r\n                    timestamp: Date.now()\r\n                });\r\n                console.log('已发送登录成功事件，主题将自动同步');\r\n            } catch (error) {\r\n                console.error('同步主题配置失败:', error);\r\n            }\r\n        }\r\n    }\r\n});"],"names":["defineStore","uni","login","verifyAndLogin","sendVerificationCode","useCoupleStore","refreshToken","getCurrentUser"],"mappings":"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"}