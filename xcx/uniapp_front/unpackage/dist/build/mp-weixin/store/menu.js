"use strict";const t=require("../common/vendor.js"),s=require("../mock/menu.js"),e=require("../api/menu.js"),r=t.defineStore("menu",{state:()=>({categories:[],products:{},allProducts:[],currentCategoryId:null,status:"idle",error:null,useRealApi:!1}),getters:{currentProducts:t=>t.currentCategoryId&&t.products[t.currentCategoryId]?t.products[t.currentCategoryId]:[]},actions:{setCurrentCategory(t){this.currentCategoryId=t},async fetchMenuData(){this.status="loading",this.error=null;try{this.useRealApi?await this.fetchRealMenuData():await this.fetchMockMenuData(),this.status="success"}catch(t){this.status="error",this.error=t.message||"加载菜单数据失败",console.error("获取菜单数据失败:",t)}},async fetchRealMenuData(){const t=await e.getCategories();this.categories=t.map((t=>({id:t.id,name:t.name,description:t.description})));const s=await e.getProducts();this.allProducts=s,this.products={},this.categories.forEach((t=>{this.products[t.id]=s.filter((s=>s.category===t.id))})),this.categories.length>0&&(this.currentCategoryId=this.categories[0].id)},async fetchMockMenuData(){await new Promise((t=>setTimeout(t,500))),this.categories=s.mockMenuData.categories,this.products=s.mockMenuData.products,this.allProducts=[],Object.values(this.products).forEach((t=>{this.allProducts.push(...t)})),this.categories.length>0&&(this.currentCategoryId=this.categories[0].id)},setApiMode(t){this.useRealApi=t,console.log("API模式设置为:",t?"真实API":"模拟数据")},toggleApiMode(t=!1){this.setApiMode(t),this.fetchMenuData()},async addCategory(t){try{if(this.useRealApi){const s=await e.addCategory(t);this.categories.push(s),this.products[s.id]=[]}else{const s=Math.max(...this.categories.map((t=>t.id)))+1,e={id:s,...t};this.categories.push(e),this.products[s]=[]}return!0}catch(s){throw console.error("添加分类失败:",s),s}},async addProduct(t){try{if(this.useRealApi){const s=await e.addProduct(t);this.allProducts.push(s),this.products[s.category]||(this.products[s.category]=[]),this.products[s.category].push(s)}else{const s={id:Math.max(...this.allProducts.map((t=>t.id)))+1,...t};this.allProducts.push(s),this.products[t.categoryId]||(this.products[t.categoryId]=[]),this.products[t.categoryId].push(s)}return!0}catch(s){throw console.error("添加商品失败:",s),s}}}});exports.useMenuStore=r;
