"use strict";const e=require("../common/vendor.js"),r=require("../api/order.js"),t=require("../utils/storage.js"),s=e.defineStore("order",{state:()=>({sentOrders:[],receivedOrders:[],currentOrderDetail:null,status:"idle",error:null}),getters:{allOrders:e=>[...e.sentOrders,...e.receivedOrders].sort(((e,r)=>new Date(r.createTime)-new Date(e.createTime)))},actions:{async createOrder(e){this.status="loading";try{console.log("OrderStore createOrder - 原始数据:",e);const t={items:e.items.map((e=>{console.log("处理订单项:",e);const r=e.product||e.item&&e.item.id;if(!r)throw console.error("无法获取商品ID:",e),new Error("商品ID缺失");return{product:r,quantity:e.quantity}})),notes:e.notes||e.note||""};console.log("Creating order with data:",t);const s=await r.createOrder(t);console.log("Order created successfully:",s);const o=this.normalizeOrderData(s);return o.type="sent",this.sentOrders.unshift(o),this.saveOrdersToLocal(),this.status="success",o}catch(t){throw this.status="error",this.error=t.message,console.error("Failed to create order:",t),t}},loadOrdersFromLocal(){this.sentOrders=t.Storage.get(t.STORAGE_KEYS.SENT_ORDERS,[]),this.receivedOrders=t.Storage.get(t.STORAGE_KEYS.RECEIVED_ORDERS,[])},saveOrdersToLocal(){t.Storage.set(t.STORAGE_KEYS.SENT_ORDERS,this.sentOrders),t.Storage.set(t.STORAGE_KEYS.RECEIVED_ORDERS,this.receivedOrders)},normalizeOrderData:e=>({id:e.id,creator:e.creator,creator_username:e.creator_username,status:e.status,notes:e.notes,note:e.notes,total_price:e.total_price,totalPrice:e.total_price,created_at:e.created_at,createTime:e.created_at,updated_at:e.updated_at,items:e.items||[],created_by_current_user:e.created_by_current_user}),checkOrderChanges(e,r){if(e.length!==r.length)return!0;for(const t of r){const r=e.find((e=>e.id===t.id));if(!r)return!0;if(r.status!==t.status)return console.log(`订单 ${t.id} 状态变化: ${r.status} -> ${t.status}`),!0;if(r.updated_at!==t.updated_at)return console.log(`订单 ${t.id} 更新时间变化`),!0}return!1},async fetchSentOrders(){this.status="loading";try{console.log("Fetching sent orders...");const e=(await r.getOrders()).filter((e=>e.created_by_current_user)).map((e=>{const r=this.normalizeOrderData(e);return r.type="sent",r}));this.checkOrderChanges(this.sentOrders,e)&&(console.log("发现发送订单变化，更新数据"),this.sentOrders=e,this.saveOrdersToLocal()),console.log("Sent orders fetched:",this.sentOrders.length,"条"),this.status="success"}catch(e){this.status="error",this.error=e.message,console.error("Failed to fetch sent orders:",e)}},async fetchReceivedOrders(){this.status="loading";try{console.log("Fetching received orders...");const e=(await r.getOrders()).filter((e=>!e.created_by_current_user)).map((e=>{const r=this.normalizeOrderData(e);return r.type="received",r}));this.checkOrderChanges(this.receivedOrders,e)&&(console.log("发现接收订单变化，更新数据"),this.receivedOrders=e,this.saveOrdersToLocal()),console.log("Received orders fetched:",this.receivedOrders.length,"条"),this.status="success"}catch(e){this.status="error",this.error=e.message,console.error("Failed to fetch received orders:",e)}},async fetchOrderDetail(e){this.status="loading";try{let t=this.sentOrders.find((r=>r.id==e))||this.receivedOrders.find((r=>r.id==e));if(t)this.currentOrderDetail=t;else{console.log("Fetching order detail from API for id:",e);const t=await r.getOrderDetail(e),s=this.normalizeOrderData(t);s.type=t.created_by_current_user?"sent":"received",this.currentOrderDetail=s}console.log("Order detail loaded:",this.currentOrderDetail),this.status="success"}catch(t){this.status="error",this.error=t.message,console.error("Failed to fetch order detail:",t)}},async updateOrderItem({orderId:e,itemId:t,data:s}){try{const o=this.sentOrders.find((r=>r.id===e))||this.receivedOrders.find((r=>r.id===e));if(o){const e=o.items.find((e=>e.item.id===t));e&&(Object.assign(e,s),this.saveOrdersToLocal())}r.updateOrderItem&&await r.updateOrderItem(e,t,s),await this.fetchOrderDetail(e)}catch(o){throw console.error("Failed to update order item:",o),o}},initOrders(){this.loadOrdersFromLocal()}}});exports.useOrderStore=s;
